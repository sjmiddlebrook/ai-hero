diff --git a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/api/chat/route.ts b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/api/chat/route.ts
index bdb7f51..868dcfb 100644
--- a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/api/chat/route.ts
+++ b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/api/chat/route.ts
@@ -71,15 +71,11 @@ export async function POST(request: Request) {
       // If this is a new chat, send the chat ID to the frontend
       if (!chatId) {
         dataStream.writer.write({
-          // TODO: fix this type error
-          type: "data",
-
-          value: [
-            {
-              type: "NEW_CHAT_CREATED",
-              chatId: currentChatId,
-            },
-          ],
+          type: "data-new-chat-created",
+          data: {
+            chatId: currentChatId,
+          },
+          transient: true,
         });
       }
 
diff --git a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/chat.tsx b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/chat.tsx
index f798010..0f843bd 100644
--- a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/chat.tsx
+++ b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/chat.tsx
@@ -6,7 +6,6 @@ import { useState, useEffect } from "react";
 import { useRouter } from "next/navigation";
 import { ChatMessage } from "~/components/chat-message";
 import { SignInModal } from "~/components/sign-in-modal";
-import { isNewChatCreated } from "~/utils";
 import type { OurMessage } from "~/types";
 
 interface ChatProps {
@@ -24,13 +23,7 @@ export const ChatPage = ({
 }: ChatProps) => {
   const [showSignInModal, setShowSignInModal] = useState(false);
   const router = useRouter();
-  const {
-    messages,
-    sendMessage,
-    status,
-    // TODO: fix data property
-    data,
-  } = useChat<OurMessage>({
+  const { messages, sendMessage, status } = useChat<OurMessage>({
     // TODO: fix body property
     body: {
       chatId,
@@ -41,11 +34,16 @@ export const ChatPage = ({
   const isLoading = status === "streaming";
 
   useEffect(() => {
-    const lastDataItem = data?.[data.length - 1];
-    if (lastDataItem && isNewChatCreated(lastDataItem)) {
-      router.push(`?id=${lastDataItem.chatId}`);
+    const lastMessage = messages[messages.length - 1];
+    const mostRecentPartOfMessage =
+      lastMessage?.parts?.[lastMessage.parts.length - 1];
+    if (
+      mostRecentPartOfMessage &&
+      mostRecentPartOfMessage.type === "data-new-chat-created"
+    ) {
+      router.push(`?id=${mostRecentPartOfMessage.data.chatId}`);
     }
-  }, [data, router]);
+  }, [messages, router]);
 
   const [input, setInput] = useState("");
 
diff --git a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/types.ts b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/types.ts
index e17befa..ca311e1 100644
--- a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/types.ts
+++ b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/types.ts
@@ -4,6 +4,9 @@ import type { Action } from "./get-next-action";
 export type OurMessage = UIMessage<
   never,
   {
+    "new-chat-created": {
+      chatId: string;
+    };
     "new-action": Action;
   }
 >;
diff --git a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/utils.ts b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/utils.ts
index 29ce4a5..a397d2a 100644
--- a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/utils.ts
+++ b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/utils.ts
@@ -1,19 +1,5 @@
 import type { UIMessage } from "ai";
 
-export function isNewChatCreated(data: unknown): data is {
-  type: "NEW_CHAT_CREATED";
-  chatId: string;
-} {
-  return (
-    typeof data === "object" &&
-    data !== null &&
-    "type" in data &&
-    data.type === "NEW_CHAT_CREATED" &&
-    "chatId" in data &&
-    typeof data.chatId === "string"
-  );
-}
-
 export const textPartsToContent = (parts: UIMessage["parts"]) => {
   return parts
     .map((part) => {
