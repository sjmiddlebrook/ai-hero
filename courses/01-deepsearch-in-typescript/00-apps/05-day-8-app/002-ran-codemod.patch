diff --git a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/evals/arsenal.eval.ts b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/evals/arsenal.eval.ts
index bdd9483..477a8f8 100644
--- a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/evals/arsenal.eval.ts
+++ b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/evals/arsenal.eval.ts
@@ -1,7 +1,7 @@
 // Note: You'll want to modify these evals, since they may be out of date.
 // You should choose your own evals because we are actively testing for recency.
 
-import type { Message } from "ai";
+import type { UIMessage } from "ai";
 import { evalite } from "evalite";
 import { askDeepSearch } from "~/deep-search";
 import { Factuality } from "~/factuality-scorer";
@@ -118,7 +118,7 @@ Export: Add the job to the render queue and render. DaVinci Resolve will create
     ];
   },
   task: async (input) => {
-    const messages: Message[] = [
+    const messages: UIMessage[] = [
       {
         id: "1",
         role: "user",
diff --git a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/evals/initial.eval.ts b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/evals/initial.eval.ts
index 3791aed..4464f66 100644
--- a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/evals/initial.eval.ts
+++ b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/evals/initial.eval.ts
@@ -1,4 +1,4 @@
-import type { Message } from "ai";
+import type { UIMessage } from "ai";
 import { evalite } from "evalite";
 import { askDeepSearch } from "~/deep-search";
 import { Factuality } from "~/factuality-scorer";
@@ -33,7 +33,7 @@ Development and Build Performance: Improved build times and Faster Fast Refresh.
     ];
   },
   task: async (input) => {
-    const messages: Message[] = [
+    const messages: UIMessage[] = [
       {
         id: "1",
         role: "user",
diff --git a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/api/chat/route.ts b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/api/chat/route.ts
index 9b35215..f20834c 100644
--- a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/api/chat/route.ts
+++ b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/api/chat/route.ts
@@ -1,4 +1,4 @@
-import type { Message } from "ai";
+import type { UIMessage } from "ai";
 import { createDataStreamResponse, appendResponseMessages } from "ai";
 import { auth } from "~/server/auth";
 import { upsertChat } from "~/server/db/queries";
@@ -24,7 +24,7 @@ export async function POST(request: Request) {
   }
 
   const body = (await request.json()) as {
-    messages: Array<Message>;
+    messages: Array<UIMessage>;
     chatId?: string;
   };
 
@@ -65,9 +65,13 @@ export async function POST(request: Request) {
     execute: async (dataStream) => {
       // If this is a new chat, send the chat ID to the frontend
       if (!chatId) {
-        dataStream.writeData({
-          type: "NEW_CHAT_CREATED",
-          chatId: currentChatId,
+        dataStream.write({
+          'type': 'data',
+
+          'value': [{
+            type: "NEW_CHAT_CREATED",
+            chatId: currentChatId,
+          }]
         });
       }
 
@@ -105,7 +109,10 @@ export async function POST(request: Request) {
           // Save the annotation in-memory
           annotations.push(annotation);
           // Send it to the client
-          dataStream.writeMessageAnnotation(annotation);
+          dataStream.write({
+            'type': 'message-annotations',
+            'value': [annotation]
+          });
         },
       });
 
diff --git a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/chat.tsx b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/chat.tsx
index 9fa7a42..6c606fa 100644
--- a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/chat.tsx
+++ b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/chat.tsx
@@ -7,14 +7,14 @@ import { useRouter } from "next/navigation";
 import { ChatMessage } from "~/components/chat-message";
 import { SignInModal } from "~/components/sign-in-modal";
 import { isNewChatCreated } from "~/utils";
-import type { Message } from "ai";
+import type { UIMessage } from "ai";
 import type { OurMessageAnnotation } from "~/types";
 
 interface ChatProps {
   userName: string;
   isAuthenticated: boolean;
   chatId: string | undefined;
-  initialMessages: Message[];
+  initialMessages: UIMessage[];
 }
 
 export const ChatPage = ({
diff --git a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/page.tsx b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/page.tsx
index 4891783..7996efc 100644
--- a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/page.tsx
+++ b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/page.tsx
@@ -4,7 +4,7 @@ import { auth } from "~/server/auth/index.ts";
 import { ChatPage } from "./chat.tsx";
 import { AuthButton } from "../components/auth-button.tsx";
 import { getChats, getChat } from "~/server/db/queries";
-import type { Message } from "ai";
+import type { UIMessage } from "ai";
 import type { OurMessageAnnotation } from "~/types.ts";
 
 export default async function HomePage({
@@ -34,7 +34,7 @@ export default async function HomePage({
     activeChat?.messages.map((msg) => ({
       id: msg.id,
       role: msg.role as "user" | "assistant",
-      parts: msg.content as Message["parts"],
+      parts: msg.content as UIMessage["parts"],
       content: "",
       annotations: (msg.annotations ?? []) as OurMessageAnnotation[],
     })) ?? [];
diff --git a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/components/chat-message.tsx b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/components/chat-message.tsx
index 64cacb1..d219c31 100644
--- a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/components/chat-message.tsx
+++ b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/components/chat-message.tsx
@@ -1,10 +1,10 @@
 import ReactMarkdown, { type Components } from "react-markdown";
-import type { Message } from "ai";
+import type { UIMessage } from "ai";
 import { useState } from "react";
 import { SearchIcon, LinkIcon } from "lucide-react";
 import type { OurMessageAnnotation } from "~/types";
 
-type MessagePart = NonNullable<Message["parts"]>[number];
+type MessagePart = NonNullable<UIMessage["parts"]>[number];
 
 interface ChatMessageProps {
   parts: MessagePart[];
@@ -120,7 +120,7 @@ const ReasoningSteps = ({
                 {isOpen && (
                   <div className="px-2 py-1">
                     <div className="text-sm italic text-gray-400">
-                      <Markdown>{annotation.action.reasoning}</Markdown>
+                      <Markdown>{annotation.action.reasoningText}</Markdown>
                     </div>
                     {annotation.action.type === "search" && (
                       <div className="mt-2 flex items-center gap-2 text-sm text-gray-400">
diff --git a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/deep-search.ts b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/deep-search.ts
index 96601d1..3c326f5 100644
--- a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/deep-search.ts
+++ b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/deep-search.ts
@@ -1,9 +1,9 @@
-import { streamText, type Message, type StreamTextResult } from "ai";
+import { streamText, type UIMessage, type StreamTextResult } from "ai";
 import { runAgentLoop } from "./run-agent-loop";
 import type { OurMessageAnnotation } from "./types";
 
 export const streamFromDeepSearch = async (opts: {
-  messages: Message[];
+  messages: UIMessage[];
   onFinish: Parameters<typeof streamText>[0]["onFinish"];
   langfuseTraceId?: string;
   writeMessageAnnotation?: (annotation: OurMessageAnnotation) => void;
@@ -15,7 +15,7 @@ export const streamFromDeepSearch = async (opts: {
   });
 };
 
-export async function askDeepSearch(messages: Message[]) {
+export async function askDeepSearch(messages: UIMessage[]) {
   const result = await streamFromDeepSearch({
     messages,
     onFinish: () => {}, // just a stub
@@ -26,5 +26,5 @@ export async function askDeepSearch(messages: Message[]) {
   // the stream will never finish
   await result.consumeStream();
 
-  return await result.text;
+  return await result.text.text;
 }
diff --git a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/get-next-action.ts b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/get-next-action.ts
index 54fa5f7..4a82e26 100644
--- a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/get-next-action.ts
+++ b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/get-next-action.ts
@@ -9,7 +9,7 @@ export const actionSchema = z.object({
     .describe(
       "The title of the action, to be displayed in the UI. Be extremely concise. 'Searching Saka's injury history', 'Checking HMRC industrial action', 'Comparing toaster ovens'",
     ),
-  reasoning: z.string().describe("The reason you chose this step."),
+  reasoningText: z.string().describe("The reason you chose this step."),
   type: z.enum(["search", "scrape", "answer"]).describe(
     `The type of action to take.
       - 'search': Search the web for more information.
diff --git a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/run-agent-loop.ts b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/run-agent-loop.ts
index 7fe2207..43ca5d9 100644
--- a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/run-agent-loop.ts
+++ b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/run-agent-loop.ts
@@ -2,13 +2,13 @@ import { SystemContext } from "./system-context";
 import { getNextAction } from "./get-next-action";
 import { searchSerper } from "./serper";
 import { bulkCrawlWebsites } from "./server/scraper";
-import { streamText, type StreamTextResult, type Message } from "ai";
+import { streamText, type StreamTextResult, type UIMessage } from "ai";
 import { model } from "~/model";
 import { answerQuestion } from "./answer-question";
 import type { OurMessageAnnotation } from "./types";
 
 export async function runAgentLoop(
-  messages: Message[],
+  messages: UIMessage[],
   opts: {
     langfuseTraceId?: string;
     writeMessageAnnotation?: (annotation: OurMessageAnnotation) => void;
@@ -26,9 +26,13 @@ export async function runAgentLoop(
 
     // Send the action as an annotation if writeMessageAnnotation is provided
     if (opts.writeMessageAnnotation) {
-      opts.writeMessageAnnotation({
-        type: "NEW_ACTION",
-        action: nextAction,
+      opts.write({
+        'type': 'message-annotations',
+
+        'value': [{
+          type: "NEW_ACTION",
+          action: nextAction,
+        }]
       });
     }
 
diff --git a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/serper.ts b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/serper.ts
index b517a74..6ff07b4 100644
--- a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/serper.ts
+++ b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/serper.ts
@@ -77,7 +77,7 @@ const fetchFromSerper = cacheWithRedis(
     });
 
     if (!response.ok) {
-      throw new Error(await response.text());
+      throw new Error(await response.text.text());
     }
 
     const json = await response.json();
diff --git a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/server/db/queries.ts b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/server/db/queries.ts
index 273bd69..969fb5a 100644
--- a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/server/db/queries.ts
+++ b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/server/db/queries.ts
@@ -1,13 +1,13 @@
 import { db } from ".";
 import { chats, messages } from "./schema";
-import type { Message } from "ai";
+import type { UIMessage } from "ai";
 import { eq, and } from "drizzle-orm";
 
 export const upsertChat = async (opts: {
   userId: string;
   chatId: string;
   title: string;
-  messages: Message[];
+  messages: UIMessage[];
 }) => {
   const { userId, chatId, title, messages: newMessages } = opts;
 
diff --git a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/server/scraper.ts b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/server/scraper.ts
index 69530c4..c06bda1 100644
--- a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/server/scraper.ts
+++ b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/server/scraper.ts
@@ -96,7 +96,7 @@ const checkRobotsTxt = async (url: string): Promise<boolean> => {
       return true;
     }
 
-    const robotsTxt = await response.text();
+    const robotsTxt = await response.text.text();
     const robots = robotsParser(robotsUrl, robotsTxt);
 
     // Use a common crawler user agent
@@ -161,7 +161,7 @@ export const crawlWebsite = cacheWithRedis(
         const response = await fetch(url);
 
         if (response.ok) {
-          const html = await response.text();
+          const html = await response.text.text();
           const articleText = extractArticleText(html);
           return {
             success: true,
diff --git a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/system-context.ts b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/system-context.ts
index cc626e5..5750147 100644
--- a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/system-context.ts
+++ b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/system-context.ts
@@ -1,4 +1,4 @@
-import type { Message } from "ai";
+import type { UIMessage } from "ai";
 
 type QueryResultSearchResult = {
   date: string;
@@ -29,7 +29,7 @@ export class SystemContext {
   /**
    * The message history
    */
-  private readonly messages: Message[];
+  private readonly messages: UIMessage[];
 
   /**
    * The history of all queries searched
@@ -41,7 +41,7 @@ export class SystemContext {
    */
   private scrapeHistory: ScrapeResult[] = [];
 
-  constructor(messages: Message[]) {
+  constructor(messages: UIMessage[]) {
     this.messages = messages;
   }
 
